<?php

namespace App\Models;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;
use Kalnoy\Nestedset\NodeTrait;
use App\Models\Url;


class Category extends Model
{
    protected $table='categories';

    use NodeTrait;

    protected static function boot()
    {
        parent::boot();

        static::saved(function (self $model) {

            if ( $model->isDirty('slug', 'parent_id')) {
                $model->generatePath();
                $model->updateDescendantsPaths();
                $model->fixTree();
            }
        });
    }

    public function url()
    {
        return $this->morphOne(Url::class, 'model','model_type', 'model_id');
    }

    public function album()
    {
        return $this->hasOne(Albums::class, 'id', 'album_id');
    }

    public function doors()
    {
        return $this->hasOne(Albums::class, 'id', 'doors_album_id');
    }

    public function scopeActive($query)
    {
        return $query->where('active', 1);
    }

    public function getUrl() {
        return route('catalog',['path'=>$this->url->path]);
    }

    public function generatePath()
    {
        $slug = $this->slug;

        $path = $this->isRoot() ? $slug : $this->parent->url->path.'/'.$slug;

        if($this->url()->exists()) {
            $_path = Url::find($this->url->id);
            if ($_path->exists()) {
                $_path->path = $path;
                $_path->save();
            }
        } else {
            $_path = Url::create(['path' => $path]);
            $_path->model()->associate($this)->save();
        }
    }

    public function updateDescendantsPaths()
    {
        $descendants = $this->descendants()->defaultOrder()->get();

        $descendants->push($this)->linkNodes()->pop();

        foreach ($descendants as $model) {

            $model->generatePath();
        }
    }

    public function getTitle() {
        return $this->name;
    }

    public function getSeoTitle() {
        return isset($this->seo_title)?$this->seo_title:$this->getTitle();
    }

    public function getLink() {
        return url($this->getUrl());
    }

    public function parentId()
    {
        return $this->belongsTo(self::class);
    }

    public function delete()
    {
        $this->url()->delete();

        return parent::delete(); // TODO: Change the autogenerated stub
    }

    public function getBackgroundImage() {
        if($this->header_background) {
            return '/storage/'.str_replace("\\", "/", $this->header_background);
        } else {
            return FALSE;
        }
    }

    public function save(array $options = [])
    {
        if (!$this->manager_id && Auth::user()) {
            $this->manager_id = Auth::user()->id;
        }

        return parent::save($options); // TODO: Change the autogenerated stub
    }

}
